#include <DS1307RTC.h>
#include <Wire.h>
#include <Time.h>
#include <TimeAlarms.h>
#include <FastLED.h>


#define ALARM_HOUR 11
#define ALARM_MIN 46
#define ALARM_SEC 0

#define ALARM_OFF_HOUR 0
#define ALARM_OFF_MIN 10
#define ALARM_OFF_SEC 0


#define LED_DELAY 10

#define NUM_LEDS 60
#define DATA_PIN 6

#define LED_PIN 13

CRGB leds[NUM_LEDS];

void setup()  
{
  // Setup the alarm.
  tmElements_t tm;
  tm.Hour = ALARM_HOUR;
  tm.Minute = ALARM_MIN;
  tm.Second = ALARM_SEC;
  
  setSyncProvider(RTC.get);
  
  // setup the lights
  FastLED.addLeds<NEOPIXEL, DATA_PIN>(leds, NUM_LEDS);
  LightsOff();

  pinMode(DATA_PIN, OUTPUT);
  
  // Create an alarm for everyday
  Alarm.alarmRepeat(tm.Hour, tm.Minute, tm.Second, Sunrise);  
    
  // Create an alarm to turn the lights off again
  Alarm.alarmRepeat(tm.Hour + ALARM_OFF_HOUR, tm.Minute + ALARM_OFF_MIN, tm.Second + ALARM_OFF_SEC, LightsOff);
  
  // Optional power indicator
  digitalWrite(LED_PIN, HIGH);
}

void loop()
{ 
  // Alarm.delay has to be called occasionally to make the alarms work
  Alarm.delay(500);
}

// turn on the leds like a sunrise red - orange - white (brightest)
void Sunrise() {
  
  // total sunrise length, in minutes
  static const uint8_t sunriseLength = 5;

  // how often (in seconds) should the heat color increase?
  // for the default of 30 minutes, this should be about every 7 seconds
  // 7 seconds x 256 gradient steps = 1,792 seconds = ~30 minutes
  static const uint8_t interval = (sunriseLength * 60) / 256;

 
  // current gradient palette color index
  static uint8_t heatIndex = 0; // start out at 0

  // HeatColors_p is a gradient palette built in to FastLED
  // that fades from black to red, orange, yellow, white
  // feel free to use another palette or define your own custom one
  CRGB color = ColorFromPalette(HeatColors_p, heatIndex);

  // fill the entire strip with the current color
  fill_solid(leds, NUM_LEDS, color);

  // slowly increase the heat
  EVERY_N_SECONDS(LED_DELAY) {
    // stop incrementing at 255, we don't want to overflow back to 0
    if(heatIndex < 255) {
      heatIndex++;
    }
  }
}

// turn off the leds
void LightsOff()
{
  for(int i = 0; i < NUM_LEDS; i++ )
  {
    leds[i] = CRGB::Black;
    FastLED.show();
  }
}
